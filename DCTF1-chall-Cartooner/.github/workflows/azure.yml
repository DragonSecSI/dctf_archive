name: "Stage challenge for production"
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  file_existence:
    runs-on: ubuntu-latest
    steps:
      - name: Repo lowecase
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          
      - name: Repo lowecase2
        run: |
          echo "REPO_END=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')" >>${GITHUB_ENV}
          
      - name: Checkout repo
        uses: actions/checkout@v1


      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "Dockerfile"

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        uses: docker/build-push-action@v1
        with:
          username: dsecid
          password: ${{ secrets.REGISTRY_TOKEN }}
          registry: ghcr.io
          repository: ${{ env.REPO }}
          tag_with_ref: true
          name: 'Terraform'

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: file_existence
    env:
      working-directory: ./terraform
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }} 
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENET_ID }}
      TF_VAR_registry_token: ${{ secrets.REGISTRY_TOKEN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - name: Repo lowecase
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
          
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working-directory }} 

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          export "TF_VAR_container_name=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          export "TF_VAR_container_group_name=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          export "TF_VAR_resource_group_name=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          export "TF_VAR_storage_account=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]' | rev | cut -d "-" -f 2,1 | sed s/-/""/g | rev)"
          export "TF_VAR_storage_container=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]' | rev | cut -d "-" -f 2,1 | sed s/-/""/g | rev)container"
          export "TF_VAR_container_image=ghcr.io/${{ env.REPO }}:main"
          terraform plan
        working-directory: ${{ env.working-directory }}

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          export "TF_VAR_container_name=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          export "TF_VAR_container_group_name=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          export "TF_VAR_resource_group_name=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          export "TF_VAR_storage_account=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]' | rev | cut -d "-" -f 2,1 | sed s/-/""/g | rev)"
          export "TF_VAR_storage_container=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]' | rev | cut -d "-" -f 2,1 | sed s/-/""/g | rev)container"
          export "TF_VAR_container_image=ghcr.io/${{ env.REPO }}:main"
          terraform apply -auto-approve
        working-directory: ${{ env.working-directory }}
